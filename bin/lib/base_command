#!/bin/bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$(cd -P "$(dirname "$SOURCE")/../.." >/dev/null 2>&1 && pwd)"

# shellcheck source=./print_style
source "$DIR/bin/lib/print_style"

# Go to the project dir
if [ -f "$DIR/.env" ]; then
    export $(grep -v '^#' "$DIR/.env" | xargs) 2>/dev/null
fi

TTY_OPTION='-T' # disable tty
if [ -t 0 ]; then
    TTY_OPTION='' # enable tty
fi

USER_OPTION=""

docker-compose-exec-bash() {
    if [ "$2" == "" ] ; then
        cd "$DIR" && docker-compose exec $TTY_OPTION $USER_OPTION "$1" /bin/sh
    else
        cd "$DIR" && docker-compose exec $TTY_OPTION $USER_OPTION "$1" /bin/sh -c "$2"
    fi
}

replace-env-var() {
    local env_name=$1
    local env_value=$2
    local env_path=$3

    if [[ "$OSTYPE" == "darwin"* ]]; then
      sed -Ei "" "s/^$env_name=.{0,}$/$env_name=$env_value/g" "$env_path"
    else
      sed -Ei "s/^$env_name=.{0,}$/$env_name=$env_value/g" "$env_path"
    fi
}

ARGUMENTS="$@"
